;; Type names used by low-level WASI interfaces.
;;
;; Some content here is derived from [CloudABI](https://github.com/NuxiNL/cloudabi).
;;
;; This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
;; for an explanation of what that means.

;;; Represents the length of a piece of data referenced by a pointer
(typename $pointersize usize)

;;; Represents an ID of a waker to be woken
(typename $waker u64)

;;; Error codes returned by functions.
;;; Not all of these error codes are returned by the functions provided by this
;;; API; some are used in higher-level library layers, and others are provided
;;; merely for alignment with POSIX.
(typename $errno
  (enum (@witx tag u16)
    ;;; No error occurred. System call completed successfully.
    $success
    ;;; Argument list too long.
    $2big
    ;;; Permission denied.
    $acces
    ;;; Address in use.
    $addrinuse
    ;;; Address not available.
    $addrnotavail
    ;;; Address family not supported.
    $afnosupport
    ;;; Resource unavailable, or operation would block.
    $again
    ;;; Connection already in progress.
    $already
    ;;; Bad file descriptor.
    $badf
    ;;; Bad message.
    $badmsg
    ;;; Device or resource busy.
    $busy
    ;;; Operation canceled.
    $canceled
    ;;; No child processes.
    $child
    ;;; Connection aborted.
    $connaborted
    ;;; Connection refused.
    $connrefused
    ;;; Connection reset.
    $connreset
    ;;; Resource deadlock would occur.
    $deadlk
    ;;; Destination address required.
    $destaddrreq
    ;;; Mathematics argument out of domain of function.
    $dom
    ;;; Reserved.
    $dquot
    ;;; File exists.
    $exist
    ;;; Bad address.
    $fault
    ;;; File too large.
    $fbig
    ;;; Host is unreachable.
    $hostunreach
    ;;; Identifier removed.
    $idrm
    ;;; Illegal byte sequence.
    $ilseq
    ;;; Operation in progress.
    $inprogress
    ;;; Interrupted function.
    $intr
    ;;; Invalid argument.
    $inval
    ;;; I/O error.
    $io
    ;;; Socket is connected.
    $isconn
    ;;; Is a directory.
    $isdir
    ;;; Too many levels of symbolic links.
    $loop
    ;;; File descriptor value too large.
    $mfile
    ;;; Too many links.
    $mlink
    ;;; Message too large.
    $msgsize
    ;;; Reserved.
    $multihop
    ;;; Filename too long.
    $nametoolong
    ;;; Network is down.
    $netdown
    ;;; Connection aborted by network.
    $netreset
    ;;; Network unreachable.
    $netunreach
    ;;; Too many files open in system.
    $nfile
    ;;; No buffer space available.
    $nobufs
    ;;; No such device.
    $nodev
    ;;; No such file or directory.
    $noent
    ;;; Executable file format error.
    $noexec
    ;;; No locks available.
    $nolck
    ;;; Reserved.
    $nolink
    ;;; Not enough space.
    $nomem
    ;;; No message of the desired type.
    $nomsg
    ;;; Protocol not available.
    $noprotoopt
    ;;; No space left on device.
    $nospc
    ;;; Function not supported.
    $nosys
    ;;; The socket is not connected.
    $notconn
    ;;; Not a directory or a symbolic link to a directory.
    $notdir
    ;;; Directory not empty.
    $notempty
    ;;; State not recoverable.
    $notrecoverable
    ;;; Not a socket.
    $notsock
    ;;; Not supported, or operation not supported on socket.
    $notsup
    ;;; Inappropriate I/O control operation.
    $notty
    ;;; No such device or address.
    $nxio
    ;;; Value too large to be stored in data type.
    $overflow
    ;;; Previous owner died.
    $ownerdead
    ;;; Operation not permitted.
    $perm
    ;;; Broken pipe.
    $pipe
    ;;; Protocol error.
    $proto
    ;;; Protocol not supported.
    $protonosupport
    ;;; Protocol wrong type for socket.
    $prototype
    ;;; Result too large.
    $range
    ;;; Read-only file system.
    $rofs
    ;;; Invalid seek.
    $spipe
    ;;; No such process.
    $srch
    ;;; Reserved.
    $stale
    ;;; Connection timed out.
    $timedout
    ;;; Text file busy.
    $txtbsy
    ;;; Cross-device link.
    $xdev
    ;;; Extension: Capabilities insufficient.
    $notcapable
    ;;; Cannot send after socket shutdown.
    $shutdown
    ;;; Memory access violation.
    $memviolation
    ;;; Unknown error has occurred.
    $unknown
    ;;; Pending asynchronous wake.
    $pending
  )
)

;;; File descriptor rights, determining which actions may be performed.
(typename $rights
  (flags (@witx repr u64)
    ;;; The right to invoke `fd_datasync`.
    ;;
    ;;; If `path_open` is set, includes the right to invoke
    ;;; `path_open` with `fdflags::dsync`.
    $fd_datasync
    ;;; The right to invoke `fd_read` and `sock_recv`.
    ;;
    ;;; If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
    $fd_read
    ;;; The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
    $fd_seek
    ;;; The right to invoke `fd_fdstat_set_flags`.
    $fd_fdstat_set_flags
    ;;; The right to invoke `fd_sync`.
    ;;
    ;;; If `path_open` is set, includes the right to invoke
    ;;; `path_open` with `fdflags::rsync` and `fdflags::dsync`.
    $fd_sync
    ;;; The right to invoke `fd_seek` in such a way that the file offset
    ;;; remains unaltered (i.e., `whence::cur` with offset zero), or to
    ;;; invoke `fd_tell`.
    $fd_tell
    ;;; The right to invoke `fd_write` and `sock_send`.
    ;;; If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
    $fd_write
    ;;; The right to invoke `fd_advise`.
    $fd_advise
    ;;; The right to invoke `fd_allocate`.
    $fd_allocate
    ;;; The right to invoke `path_create_directory`.
    $path_create_directory
    ;;; If `path_open` is set, the right to invoke `path_open` with `oflags::creat`.
    $path_create_file
    ;;; The right to invoke `path_link` with the file descriptor as the
    ;;; source directory.
    $path_link_source
    ;;; The right to invoke `path_link` with the file descriptor as the
    ;;; target directory.
    $path_link_target
    ;;; The right to invoke `path_open`.
    $path_open
    ;;; The right to invoke `fd_readdir`.
    $fd_readdir
    ;;; The right to invoke `path_readlink`.
    $path_readlink
    ;;; The right to invoke `path_rename` with the file descriptor as the source directory.
    $path_rename_source
    ;;; The right to invoke `path_rename` with the file descriptor as the target directory.
    $path_rename_target
    ;;; The right to invoke `path_filestat_get`.
    $path_filestat_get
    ;;; The right to change a file's size (there is no `path_filestat_set_size`).
    ;;; If `path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
    $path_filestat_set_size
    ;;; The right to invoke `path_filestat_set_times`.
    $path_filestat_set_times
    ;;; The right to invoke `fd_filestat_get`.
    $fd_filestat_get
    ;;; The right to invoke `fd_filestat_set_size`.
    $fd_filestat_set_size
    ;;; The right to invoke `fd_filestat_set_times`.
    $fd_filestat_set_times
    ;;; The right to invoke `path_symlink`.
    $path_symlink
    ;;; The right to invoke `path_remove_directory`.
    $path_remove_directory
    ;;; The right to invoke `path_unlink_file`.
    $path_unlink_file
    ;;; If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
    ;;; If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
    $poll_fd_readwrite
    ;;; The right to invoke `sock_shutdown`.
    $sock_shutdown
    ;;; Accept incoming connection
    $sock_accept
    ;;; Connect to an address
    $sock_connect
    ;;; Listen for incoming connection on an address
    $sock_listen
    ;;; Bind an address to a socket
    $sock_bind
    ;;; Receive data on a socket
    $sock_recv
    ;;; Send data on a socket
    $sock_send
    ;;; Retrieve locally bound address on a socket
    $sock_addr_local
    ;;; Retrieve remote address on a socket
    $sock_addr_remote
    ;;; Receive datagram on a socket
    $sock_recv_from
    ;;; Send datagram on a socket
    $sock_send_to
  )
)

;;; The type of a file descriptor or file.
(typename $filetype
  (enum (@witx tag u8)
    ;;; The type of the file descriptor or file is unknown or is different from any of the other types specified.
    $unknown
    ;;; The file descriptor or file refers to a block device inode.
    $block_device
    ;;; The file descriptor or file refers to a character device inode.
    $character_device
    ;;; The file descriptor or file refers to a directory inode.
    $directory
    ;;; The file descriptor or file refers to a regular file inode.
    $regular_file
    ;;; The file descriptor or file refers to a datagram socket.
    $socket_dgram
    ;;; The file descriptor or file refers to a byte-stream socket.
    $socket_stream
    ;;; The file refers to a symbolic link inode.
    $symbolic_link
    ;;; The file descriptor or file refers to a raw socket.
    $socket_raw
    ;;; The file descriptor or file refers to a sequential packet socket.
    $socket_seqpacket
  )
)

;;; Flags provided to `sock_recv`.
(typename $riflags
  (flags (@witx repr u16)
    ;;; Returns the message without removing it from the socket's receive queue.
    $recv_peek
    ;;; On byte-stream sockets, block until the full amount of data can be returned.
    $recv_waitall
    ;;; Indicates if the packet should be truncated to the buffer size
    $recv_data_truncated
  )
)

;;; Signal condition.
(typename $signal
  (enum (@witx tag u8)
    ;;; No signal. Note that POSIX has special semantics for `kill(pid, 0)`,
    ;;; so this value is reserved.
    $none
    ;;; Hangup.
    ;;; Action: Terminates the process.
    $hup
    ;;; Terminate interrupt signal.
    ;;; Action: Terminates the process.
    $int
    ;;; Terminal quit signal.
    ;;; Action: Terminates the process.
    $quit
    ;;; Illegal instruction.
    ;;; Action: Terminates the process.
    $ill
    ;;; Trace/breakpoint trap.
    ;;; Action: Terminates the process.
    $trap
    ;;; Process abort signal.
    ;;; Action: Terminates the process.
    $abrt
    ;;; Access to an undefined portion of a memory object.
    ;;; Action: Terminates the process.
    $bus
    ;;; Erroneous arithmetic operation.
    ;;; Action: Terminates the process.
    $fpe
    ;;; Kill.
    ;;; Action: Terminates the process.
    $kill
    ;;; User-defined signal 1.
    ;;; Action: Terminates the process.
    $usr1
    ;;; Invalid memory reference.
    ;;; Action: Terminates the process.
    $segv
    ;;; User-defined signal 2.
    ;;; Action: Terminates the process.
    $usr2
    ;;; Write on a pipe with no one to read it.
    ;;; Action: Ignored.
    $pipe
    ;;; Alarm clock.
    ;;; Action: Terminates the process.
    $alrm
    ;;; Termination signal.
    ;;; Action: Terminates the process.
    $term
    ;;; Stkflt
    ;;; Action: Ignored.
    $stkflt
    ;;; Child process terminated, stopped, or continued.
    ;;; Action: Ignored.
    $chld
    ;;; Continue executing, if stopped.
    ;;; Action: Continues executing, if stopped.
    $cont
    ;;; Stop executing.
    ;;; Action: Stops executing.
    $stop
    ;;; Terminal stop signal.
    ;;; Action: Stops executing.
    $tstp
    ;;; Background process attempting read.
    ;;; Action: Stops executing.
    $ttin
    ;;; Background process attempting write.
    ;;; Action: Stops executing.
    $ttou
    ;;; High bandwidth data is available at a socket.
    ;;; Action: Ignored.
    $urg
    ;;; CPU time limit exceeded.
    ;;; Action: Terminates the process.
    $xcpu
    ;;; File size limit exceeded.
    ;;; Action: Terminates the process.
    $xfsz
    ;;; Virtual timer expired.
    ;;; Action: Terminates the process.
    $vtalrm
    ;;; Profiling timer expired.
    ;;; Action: Terminates the process.
    $prof
    ;;; Window changed.
    ;;; Action: Ignored.
    $winch
    ;;; I/O possible.
    ;;; Action: Terminates the process.
    $poll
    ;;; Power failure.
    ;;; Action: Terminates the process.
    $pwr
    ;;; Bad system call.
    ;;; Action: Terminates the process.
    $sys
  )
)

;;; A region of memory for scatter/gather reads.
(typename hidden $iovec
  (record
    (field $buf (@witx pointer u8))
    (field $buf_len $pointersize)
  )
)

;;; A region of memory for scatter/gather writes.
(typename hidden $ciovec
  (record
    (field $buf (@witx const_pointer u8))
    (field $buf_len $pointersize)
  )
)

;; All the types here are hidden and only used for validation purposes

;; ################ HIDDEN ####################

;; Type names used by low-level WASI interfaces - these are hidden and should
;; instead be maintained in the WASI witx.

(typename hidden $size u32)
(typename hidden $filesize u64)
(typename hidden $timestamp u64)
(typename hidden $clockid
  (enum (@witx tag u32)
    $hidden
  )
)
(typename hidden $fd (handle))
(typename hidden $iovec_array (list $iovec))
(typename hidden $ciovec_array (list $ciovec))
(typename hidden $filedelta s64)
(typename hidden $whence
  (enum (@witx tag u8)
    $hidden
  )
)
(typename hidden $dircookie u64)
(typename hidden $dirnamlen u32)
(typename hidden $inode u64)
(typename hidden $dirent
  (record
    (field $d_next $dircookie)
    (field $d_ino $inode)
    (field $d_namlen $dirnamlen)
    (field $d_type $filetype)
  )
)
(typename hidden $advice
  (enum (@witx tag u8)
    $hidden
  )
)
(typename hidden $fdflags
  (flags (@witx repr u16)
    $hidden
  )
)
(typename hidden $fdstat
  (record
    (field $fs_filetype $filetype)
    (field $fs_flags $fdflags)
    (field $fs_rights_base $rights)
    (field $fs_rights_inheriting $rights)
  )
)
(typename hidden $device u64)
(typename hidden $fstflags
  (flags (@witx repr u16)
    $hidden
  )
)
(typename hidden $lookupflags
  (flags (@witx repr u32)
    $hidden
  )
)
(typename hidden $oflags
  (flags (@witx repr u16)
    $hidden
  )
)
(typename hidden $linkcount u64)
(typename hidden $filestat
  (record
    (field $dev $device)
    (field $ino $inode)
    (field $filetype $filetype)
    (field $nlink $linkcount)
    (field $size $filesize)
    (field $atim $timestamp)
    (field $mtim $timestamp)
    (field $ctim $timestamp)
  )
)
(typename hidden $userdata u64)
(typename hidden $eventtype
  (enum (@witx tag u8)
    $hidden1
    $hidden2
    $hidden3
  )
)
(typename hidden $eventrwflags
  (flags (@witx repr u16)
    $hidden
  )
)
(typename hidden $event_fd_readwrite
  (record
    (field $nbytes $filesize)
    (field $flags $eventrwflags)
  )
)
(typename hidden $event
  (record
    (field $userdata $userdata)
    (field $error $errno)
    (field $type $eventtype)
    (field $fd_readwrite $event_fd_readwrite)
  )
)
(typename hidden $subclockflags
  (flags (@witx repr u16)
    $hidden
  )
)
(typename hidden $subscription_clock
  (record
    (field $id $clockid)
    (field $timeout $timestamp)
    (field $precision $timestamp)
    (field $flags $subclockflags)
  )
)
(typename hidden $subscription_fd_readwrite
  (record
    (field $file_descriptor $fd)
  )
)
(typename hidden $subscription_u
  (union
    (@witx tag $eventtype)
    $subscription_clock
    $subscription_fd_readwrite
    $subscription_fd_readwrite
  )
)
(typename hidden $subscription
  (record
    (field $userdata $userdata)
    (field $u $subscription_u)
  )
)
(typename hidden $exitcode u32)
(typename hidden $roflags
  (flags (@witx repr u16)
    $hidden
  )
)
(typename hidden $siflags u16)
(typename hidden $sdflags
  (flags (@witx repr u8)
    $hidden
  )
)
(typename hidden $preopentype
  (enum (@witx tag u8)
    $hidden
  )
)
(typename hidden $prestat_dir
  (record
    (field $pr_name_len $size)
  )
)
(typename hidden $prestat
  (union (@witx tag $preopentype)
    $prestat_dir
  )
)

;; These next types are extensions
;; They are visible as exentions to the WASI witx

;;; Represents a large number of items
(typename $longsize u64)

;;; Value of a short hash
(typename $short_hash u64)

;;; Represents a 128bit number
(typename $hugesize
  (record
    ;;; First set of 64 bits
    (field $b0 u64)
    ;;; second set of 64 bits
    (field $b1 u64)
  )
)

;;; Represents the first 128 bits of a SHA256 hash
(typename $hash
  (record
    ;;; First set of 64 bits
    (field $b0 u64)
    ;;; second set of 64 bits
    (field $b1 u64)
  )
)

;;; Represents a snapshot of a point in time of the stack that can be restored later
(typename $stack_snapshot
  (record
    ;;; User defined field that can be used by functions
    (field $user u64)
    ;;; Hash used to identify which stack snapshot to restore
    (field $hash $hash)
  )
)

(typename $buf_array (list u8))

;;; Option type
(typename $option
  (enum (@witx tag u8)
    $none
    $some
  )
)

;;; Represents an optional timestamp
(typename $option_timestamp
  (union
    (@witx tag $option)
    u8
    $timestamp
  )
)

;;; Represents an optional hash
(typename $option_hash
  (union
    (@witx tag $option)
    u8
    $hash
  )
)

;;; A process descriptor handle.
(typename $pid (handle))

;;; A thread handle
(typename $tid (handle))

;;; A thread handle
(typename $dlopenid (handle))

;;; Represents an optional process ID
(typename $option_pid
  (union
    (@witx tag $option)
    u8
    $pid
  )
)

;;; Represents an optional file descriptior
(typename $option_fd
  (union
    (@witx tag $option)
    u8
    $fd
  )
)

;;; Bool type
(typename $bool
  (enum (@witx tag u8)
    $false
    $true
  )
)

;;; Flags for the 'fd_event' call
(typename $eventfdflags
  (flags (@witx repr u16)
    ;;; Indicates if this event file description will run as a semaphore
    $Semaphore
  )
)

;;; Rect that represents the TTY.
(typename $tty
  (record
    ;;; Number of columns
    (field $cols u32)
    ;;; Number of rows
    (field $rows u32)
    ;;; Width of the screen in pixels
    (field $width u32)
    ;;; Height of the screen in pixels
    (field $height u32)
    ;;; Indicates if stdin is a TTY
    (field $stdin_tty $bool)
    ;;; Indicates if stdout is a TTY
    (field $stdout_tty $bool)
    ;;; Indicates if stderr is a TTY
    (field $stderr_tty $bool)
    ;;; When enabled the TTY will echo input to console
    (field $echo $bool)
    ;;; When enabled buffers the input until the return key is pressed
    (field $line_buffered $bool)
    ;;; Indicates if line feeds are ignored on the input
    (field $line_feeds $bool)
  )
)

;;; Type of stdio mode to run for the sub process
(typename $stdio_mode
  (enum (@witx tag u8)
    ;;; The stdio will be piped
    $piped
    ;;; The stdio will inherit from its parent
    $inherit
    ;;; The stdio will be dumped to null
    $null
    ;;; The stdio will be written to the log file
    $log
  )
)

;;; Process handles.
(typename $process_handles
  (record
    ;;; Handle that represents the process
    (field $pid $pid)
    ;;; File handle for STDIN
    (field $stdin $option_fd)
    ;;; File handle for STDOUT
    (field $stdout $option_fd)
    ;;; File handle for STDERR
    (field $stderr $option_fd)
  )
)

;;; Socket type
(typename $sock_type
  (enum (@witx tag u8)
    ;;; Unused enum variant to prevent $socket_dgram value of 0, which
    ;;; conflicts with a macro defined in cpython which is used in a case arm
    ;;; of a switch statement alongside C macros generated from this enum.
    ;;;  ref: https://github.com/python/cpython/blob/2f369cafeeb4a4886b00396abd8a5f33e555e1c3/Modules/getaddrinfo.c#L68
    ;;;  ref: https://github.com/python/cpython/blob/3f369cafeeb4a4886b00396abd8a5f33e555e1c3/Modules/getaddrinfo.c#L355-L368
    $socket_unused
    ;;; The file descriptor or file refers to a byte-stream socket.
    $socket_stream
    ;;; The file descriptor or file refers to a datagram socket.
    $socket_dgram
    ;;; The file descriptor or file refers to a raw socket.
    $socket_raw
    ;;; The file descriptor or file refers to a sequential packet socket.
    $socket_seqpacket
  )
)

;;; Socket protocol type
(typename $sock_proto
  (enum (@witx tag u16)
    $ip
    $icmp
    $igmp
    $proto_3
    $ipip
    $proto_5
    $tcp
    $proto_7
    $egp
    $proto_9
    $proto_10
    $proto_11
    $pup
    $proto_13
    $proto_14
    $proto_15
    $proto_16
    $udp
    $proto_18
    $proto_19
    $proto_20
    $proto_21
    $idp
    $proto_23
    $proto_24
    $proto_25
    $proto_26
    $proto_27
    $proto_28
    $proto_tp
    $proto_30
    $proto_31
    $proto_32
    $dccp
    $proto_34
    $proto_35
    $proto_36
    $proto_37
    $proto_38
    $proto_39
    $proto_40
    $ipv6
    $proto_42
    $routing
    $fragment
    $proto_45
    $rsvp
    $gre
    $proto_48
    $proto_49
    $esp
    $ah
    $proto_52
    $proto_53
    $proto_54
    $proto_55
    $proto_56
    $proto_57
    $icmpv6
    $none
    $dstopts
    $proto_61
    $proto_62
    $proto_63
    $proto_64
    $proto_65
    $proto_66
    $proto_67
    $proto_68
    $proto_69
    $proto_70
    $proto_71
    $proto_72
    $proto_73
    $proto_74
    $proto_75
    $proto_76
    $proto_77
    $proto_78
    $proto_79
    $proto_80
    $proto_81
    $proto_82
    $proto_83
    $proto_84
    $proto_85
    $proto_86
    $proto_87
    $proto_88
    $proto_89
    $proto_90
    $proto_91
    $mtp
    $proto_93
    $beetph
    $proto_95
    $proto_96
    $proto_97
    $encap
    $proto_99
    $proto_100
    $proto_101
    $proto_102
    $pim
    $proto_104
    $proto_105
    $proto_106
    $proto_107
    $comp
    $proto_109
    $proto_110
    $proto_111
    $proto_112
    $proto_113
    $proto_114
    $proto_115
    $proto_116
    $proto_117
    $proto_118
    $proto_119
    $proto_120
    $proto_121
    $proto_122
    $proto_123
    $proto_124
    $proto_125
    $proto_126
    $proto_127
    $proto_128
    $proto_129
    $proto_130
    $proto_131
    $sctp
    $proto_133
    $proto_134
    $mh
    $udplite
    $mpls
    $proto_138
    $proto_139
    $proto_140
    $proto_141
    $proto_142
    $ethernet
    $proto_144
    $proto_145
    $proto_146
    $proto_147
    $proto_148
    $proto_149
    $proto_150
    $proto_151
    $proto_152
    $proto_153
    $proto_154
    $proto_155
    $proto_156
    $proto_157
    $proto_158
    $proto_159
    $proto_160
    $proto_161
    $proto_162
    $proto_163
    $proto_164
    $proto_165
    $proto_166
    $proto_167
    $proto_168
    $proto_169
    $proto_170
    $proto_171
    $proto_172
    $proto_173
    $proto_174
    $proto_175
    $proto_176
    $proto_177
    $proto_178
    $proto_179
    $proto_180
    $proto_181
    $proto_182
    $proto_183
    $proto_184
    $proto_185
    $proto_186
    $proto_187
    $proto_188
    $proto_189
    $proto_190
    $proto_191
    $proto_192
    $proto_193
    $proto_194
    $proto_195
    $proto_196
    $proto_197
    $proto_198
    $proto_199
    $proto_200
    $proto_201
    $proto_202
    $proto_203
    $proto_204
    $proto_205
    $proto_206
    $proto_207
    $proto_208
    $proto_209
    $proto_210
    $proto_211
    $proto_212
    $proto_213
    $proto_214
    $proto_215
    $proto_216
    $proto_217
    $proto_218
    $proto_219
    $proto_220
    $proto_221
    $proto_222
    $proto_223
    $proto_224
    $proto_225
    $proto_226
    $proto_227
    $proto_228
    $proto_229
    $proto_230
    $proto_231
    $proto_232
    $proto_233
    $proto_234
    $proto_235
    $proto_236
    $proto_237
    $proto_238
    $proto_239
    $proto_240
    $proto_241
    $proto_242
    $proto_243
    $proto_244
    $proto_245
    $proto_246
    $proto_247
    $proto_248
    $proto_249
    $proto_250
    $proto_251
    $proto_252
    $proto_253
    $proto_254
    $proto_raw
    $proto_256
    $proto_257
    $proto_258
    $proto_259
    $proto_260
    $proto_261
    $mptcp
    $max
  )
)

;;; Socket status
(typename $sock_status
  (enum (@witx tag u8)
    ;;; The socket is still opening
    $opening
    ;;; The socket has fully opened
    $opened
    ;;; The socket has closed
    $closed
    ;;; The socket has failed
    $failed
  )
)

;;; Socket option
(typename $sock_option
  (enum (@witx tag u8)
    ;;; Socket option that does nothing
    $noop
    ;;; Reuse Port
    $reuse_port
    ;;; Reuse Address
    $reuse_addr
    ;;; No delay
    $no_delay
    ;;; Dont route
    $dont_route
    ;;; Only accept IPv6
    $only_v6
    ;;; Broadcast
    $broadcast
    ;;; Multicast Loop IPv4
    $multicast_loop_v4
    ;;; Multicast Loop IPv6
    $multicast_loop_v6
    ;;; Promiscuous
    $promiscuous
    ;;; Socket is listening
    $listening
    ;;; Last error
    $last_error
    ;;; Keep alive
    $keep_alive
    ;;; Linger time
    $linger
    ;;; Out-of-band inline
    $oob_inline
    ;;; Receive buffer size
    $recv_buf_size
    ;;; Send buffer size
    $send_buf_size
    ;;; Receive lowat
    $recv_lowat
    ;;; Send lowat
    $send_lowat
    ;;; Receive timeout
    $recv_timeout
    ;;; Send timeout
    $send_timeout
    ;;; Connect timeout
    $connect_timeout
    ;;; Accept timeout
    $accept_timeout
    ;;; TTL of packets
    $ttl
    ;;; Multicast TTL for IPv4
    $multicast_ttl_v4
    ;;; Type of socket
    $type
    ;;; Protocol of the socket
    $proto
  )
)

;;; Level of security to allow to the streaming connection
(typename $stream_security
  (flags (@witx repr u8)
    ;;; Unencrypted
    $unencrypted
    ;;; Any encryption
    $any_encryption
    ;;; Classic encryption
    $classic_encryption
    ;;; Double encryption
    $double_encryption
  )
)

;;; Hardware address (MAC)
(typename $hardware_address
  (record
    (field $n0 u8)
    (field $n1 u8)
    (field $n2 u8)
    (field $h0 u8)
    (field $h1 u8)
    (field $h2 u8)
  )
)

;;; IP port number
(typename $ip_port u16)

;;; Address family
(typename $address_family
  (enum (@witx tag u8)
    ;;; Unspecified
    $unspec
    ;;; IP v4
    $inet4
    ;;; IP v6
    $inet6
    ;;; Unix
    $unix
  )
)

;;; Address family
(typename $address_family_ip
  (enum (@witx tag u8)
    ;;; Unspecified - this is unused, but this enum must be
    ;;; backwards-compatible with $address_family
    $unspec
    ;;; IP v4
    $inet4
    ;;; IP v6
    $inet6
  )
)

;;; Represents an unspecified address
(typename $addr_unspec
  (record
    (field $n0 u8)
  )
)

;;; An unspecified address with a port
(typename $addr_unspec_port
  (record
    (field $port $ip_port)
    (field $addr $addr_unspec)
  )
)

;;; An unspecified address with a cidr
(typename $addr_unspec_cidr
  (record
    (field $addr $addr_unspec)
    (field $prefix u8)
  )
)

;;; An IPv4 address is a 32-bit number that uniquely identifies a network interface on a machine.
(typename $addr_ip4
  (record
    (field $n0 u8)
    (field $n1 u8)
    (field $h0 u8)
    (field $h1 u8)
  )
)

;;; An IPv4 address with a port number
(typename $addr_ip4_port
  (record
    (field $port $ip_port)
    (field $addr $addr_ip4)
  )
)

;;; An IPv4 address CIDR
(typename $addr_ip4_cidr
  (record
    (field $addr $addr_ip4)
    (field $prefix u8)
  )
)

;;; An IPv6 address is a 128-bit number that uniquely identifies a network interface on a machine.
(typename $addr_ip6
  (record
    (field $n0 u16)
    (field $n1 u16)
    (field $n2 u16)
    (field $n3 u16)
    (field $h0 u16)
    (field $h1 u16)
    (field $h2 u16)
    (field $h3 u16)
    ;;; flow_info1 contains the most significant two bytes, and comes first in keeping with all wasix syscalls being little endian
    (field $flow_info1 u16)
    ;;; flow_info0 contains the least significant two bytes
    (field $flow_info0 u16)
    ;;; Same as flow_info1 and flow_info0
    (field $scope_id1 u16)
    (field $scope_id0 u16)
  )
)

;;; IPv6 address without flow info and scope ID
(typename $addr_ip6_bare
  (record
    (field $n0 u16)
    (field $n1 u16)
    (field $n2 u16)
    (field $n3 u16)
    (field $h0 u16)
    (field $h1 u16)
    (field $h2 u16)
    (field $h3 u16)
  )
)

;;; Unix socket that is bound to no more than 107 bytes
(typename $addr_unix
  (record
    (field $b0 u8)
    (field $b1 u8)
    (field $b2 u8)
    (field $b3 u8)
    (field $b4 u8)
    (field $b5 u8)
    (field $b6 u8)
    (field $b7 u8)
    (field $b8 u8)
    (field $b9 u8)
    (field $b10 u8)
    (field $b11 u8)
    (field $b12 u8)
    (field $b13 u8)
    (field $b14 u8)
    (field $b15 u8)
    (field $b16 u8)
    (field $b17 u8)
    (field $b18 u8)
    (field $b19 u8)
    (field $b20 u8)
    (field $b21 u8)
    (field $b22 u8)
    (field $b23 u8)
    (field $b24 u8)
    (field $b25 u8)
    (field $b26 u8)
    (field $b27 u8)
    (field $b28 u8)
    (field $b29 u8)
    (field $b30 u8)
    (field $b31 u8)
    (field $b32 u8)
    (field $b33 u8)
    (field $b34 u8)
    (field $b35 u8)
    (field $b36 u8)
    (field $b37 u8)
    (field $b38 u8)
    (field $b39 u8)
    (field $b40 u8)
    (field $b41 u8)
    (field $b42 u8)
    (field $b43 u8)
    (field $b44 u8)
    (field $b45 u8)
    (field $b46 u8)
    (field $b47 u8)
    (field $b48 u8)
    (field $b49 u8)
    (field $b50 u8)
    (field $b51 u8)
    (field $b52 u8)
    (field $b53 u8)
    (field $b54 u8)
    (field $b55 u8)
    (field $b56 u8)
    (field $b57 u8)
    (field $b58 u8)
    (field $b59 u8)
    (field $b60 u8)
    (field $b61 u8)
    (field $b62 u8)
    (field $b63 u8)
    (field $b64 u8)
    (field $b65 u8)
    (field $b66 u8)
    (field $b67 u8)
    (field $b68 u8)
    (field $b69 u8)
    (field $b70 u8)
    (field $b71 u8)
    (field $b72 u8)
    (field $b73 u8)
    (field $b74 u8)
    (field $b75 u8)
    (field $b76 u8)
    (field $b77 u8)
    (field $b78 u8)
    (field $b79 u8)
    (field $b80 u8)
    (field $b81 u8)
    (field $b82 u8)
    (field $b83 u8)
    (field $b84 u8)
    (field $b85 u8)
    (field $b86 u8)
    (field $b87 u8)
    (field $b88 u8)
    (field $b89 u8)
    (field $b90 u8)
    (field $b91 u8)
    (field $b92 u8)
    (field $b93 u8)
    (field $b94 u8)
    (field $b95 u8)
    (field $b96 u8)
    (field $b97 u8)
    (field $b98 u8)
    (field $b99 u8)
    (field $b100 u8)
    (field $b101 u8)
    (field $b102 u8)
    (field $b103 u8)
    (field $b104 u8)
    (field $b105 u8)
    (field $b106 u8)
    (field $b107 u8)
  )
)

;;; Unix sockets do not support CIDR
(typename $addr_unix_cidr
  (record
    (field $unused u8)
  )
)

;;; An IPv6 address with a port number
(typename $addr_ip6_port
  (record
    (field $port $ip_port)
    (field $addr $addr_ip6)
  )
)

;;; An IPv6 address CIDR
(typename $addr_ip6_cidr
  (record
    (field $addr $addr_ip6)
    (field $prefix u8)
  )
)

;;; Union of all possible addresses type
(typename $addr
  (union
    (@witx tag $address_family)
    $addr_unspec
    $addr_ip4
    $addr_ip6
    $addr_unix
  )
)

;;; Union of IP addresses
(typename $addr_ip
  (union
    (@witx tag $address_family_ip)
    $addr_unspec
    $addr_ip4
    $addr_ip6_bare
  )
)

(typename $addr_array (list $addr))

;;; Union that makes a generic IP address and port
(typename $addr_port
  (union
    (@witx tag $address_family)
    $addr_unspec_port
    $addr_ip4_port
    $addr_ip6_port
    $addr_unix
  )
)

(typename $addr_port_array (list $addr_port))

;;; Union that makes a generic IP address and prefix. a.k.a. CIDR
(typename $addr_cidr
  (union
    (@witx tag $address_family)
    $addr_unspec_cidr
    $addr_ip4_cidr
    $addr_ip6_cidr
    $addr_unix_cidr
  )
)

(typename $addr_cidr_array (list $addr_cidr))

(typename $route
  (record
    (field $cidr $addr_cidr)
    (field $via_router $addr)
    (field $preferred_until $option_timestamp)
    (field $expires_at $option_timestamp)
  )
)

;;; join flags.
(typename $join_flags
  (flags (@witx repr u32)
    ;;; Non-blocking join on the process
    $non_blocking
    ;;; Return if a process is stopped
    $wake_stopped
  )
)

;;; What has happened with the proccess when we joined on it
(typename $join_status_type
  (enum (@witx tag u8)
    ;;; Nothing has happened
    $nothing
    ;;; The process has exited by a normal exit code
    $exit_normal
    ;;; The process was terminated by a signal
    $exit_signal
    ;;; The process was stopped by a signal and can be resumed with SIGCONT
    $stopped
  )
)

;;; Represents an errno and a signal
(typename $errno_signal
  (record
    ;;; The exit code that was returned
    (field $exit_code $errno)
    ;;; The signal that was returned
    (field $signal $signal)
  )
)

;;; join status.
(typename $join_status
  (union
    (@witx tag $join_status_type)
    u8
    $errno
    $errno_signal
    $signal
  )
)

;;; thread state flags.
(typename $thread_flags
  (flags (@witx repr u16)
    ;;; tsd_used
    $tsd_used
    ;;; dlerror_flag
    $dlerror_flag
  )
)

;;; represents the state of a thread
(typename $thread_state
  (record
    (field $thread_self $pointersize)
    (field $dtv $pointersize)
    (field $thread_prev $pointersize)
    (field $thread_next $pointersize)
    (field $sysinfo $pointersize)
    (field $canary $pointersize)
    (field $tid s32)
    (field $errno_val s32)
    (field $detach_state s32)
    (field $cancel s32)
    (field $canceldisable u8)
    (field $cancelasync u8)
    (field $flags $thread_flags)
    (field $map_base $pointersize)
    (field $map_size $pointersize)
    (field $stack $pointersize)
    (field $stack_size $pointersize)
    (field $guard_size $pointersize)
    (field $result $pointersize)
    (field $cancelbuf $pointersize)
    (field $tsd $pointersize)
    (field $robust_list_head $pointersize)
    (field $robust_list_off $pointersize)
    (field $robust_list_pending $pointersize)
    (field $h_errno_val s32)
    (field $timer_id s32)
    (field $locale $pointersize)
    (field $killlock s32)
    (field $dlerror_buf $pointersize)
    (field $stdio_locks $pointersize)
  )
)

;;; thread start type
(typename $thread_start
  (record
    ;;; Address where the stack starts
    (field $stack $pointersize)
    ;;; Address where the TLS starts
    (field $tls_base $pointersize)
    ;;; Function that will be invoked when the thread starts
    (field $start_funct $pointersize)
    ;;; Arguments to pass the callback function
    (field $start_args $pointersize)
    ;;; Reserved for future WASI usage
    (field $reserved0 $pointersize)
    (field $reserved1 $pointersize)
    (field $reserved2 $pointersize)
    (field $reserved3 $pointersize)
    (field $reserved4 $pointersize)
    (field $reserved5 $pointersize)
    (field $reserved6 $pointersize)
    (field $reserved7 $pointersize)
    (field $reserved8 $pointersize)
    (field $reserved9 $pointersize)
    ;;; The size of the stack
    (field $stack_size $pointersize)
    ;;; The size of the guards at the end of the stack
    (field $guard_size $pointersize)
  )
)

;;; epoll type.
(typename $epoll_type
  (flags (@witx repr u32)
    $epollin
    $epollout
    $epollrdhup
    $epollpri
    $epollerr
    $epollhup
    $epollet
    $epolloneshot    
  )
)

;;; epoll ctl
(typename $epoll_ctl
  (enum (@witx tag u32)
    ;;; Add an entry to the interest list of the epoll file descriptor, epfd.
    $add
    ;;; Change the settings associated with fd in the interest list to the new settings specified in event.
    $mod
    ;;; Remove (deregister) the target file descriptor fd from the interest list.
    $del
  )
)

;;; epoll data
(typename $epoll_data
  (record
    ;;; Pointer to some user defined data
    (field $ptr $pointersize)
    ;;; The file descriptor of the event
    (field $fd $fd)
    ;;; User data for the event
    (field $data1 u32)
    ;;; User data for the event
    (field $data2 u64)
  )
)

;;; epoll event and its data
(typename $epoll_event
  (record
    ;;; The events that are triggered for this
    (field $events $epoll_type)
    ;;; The data of the event
    (field $data $epoll_data)
  )
)
