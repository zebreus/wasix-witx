;; WASIX Preview. This is an extension of the API that WASI initially
;; launched with.
;;
;; Some content here is derived from [CloudABI](https://github.com/NuxiNL/cloudabi).
;;
;; This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
;; for an explanation of what that means.

(use "typenames.witx")

(module $wasix_module_name
  ;;; Linear memory to be accessed by WASI(X) functions that need it.
  (import "memory" (memory))

  ;;; Sets the time value of a clock.
  ;;; Note: This is similar to `clock_settime` in POSIX.
  (@interface func (export "clock_time_set")
    ;;; The clock for which to set the time.
    (param $id $clockid)
    ;;; The value of the time to be set.
    (param $timestamp $timestamp)
    ;;; The time value of the clock.
    (result $error (expected (error $errno)))
  )

  ;;; Atomically duplicate a file handle.
  ;;
  (@interface func (export "fd_dup")
    (param $fd $fd)
    (result $error (expected $fd (error $errno)))
  )

  ;;; Creates a file handle for event notifications
  ;;;
  (@interface func (export "fd_event")
    (param $initial_val u64)
    (param $flags $eventfdflags)
    (result $error (expected $fd (error $errno)))
  )

  ;;; Opens a pipe with two file handles
  ;;;
  ;;; Pipes are bidirectional
  (@interface func (export "fd_pipe")
    (result $error (expected (tuple $fd $fd) (error $errno)))
  )

  ;;; Retrieves the current state of the TTY
  (@interface func (export "tty_get")
    (param $state (@witx pointer $tty))
    (result $error (expected (error $errno)))
  )

  ;;; Updates the properties of the the TTY
  (@interface func (export "tty_set")
    (param $state (@witx pointer $tty))
    (result $error (expected (error $errno)))
  )

  ;;; Returns the current working directory
  ;;;
  ;;; If the path exceeds the size of the buffer then this function
  ;;; will fill the path_len with the needed size and return EOVERFLOW
  (@interface func (export "getcwd")
    ;;; The buffer where current directory is stored
    (param $path (@witx pointer u8))
    (param $path_len (@witx pointer $pointersize))
    (result $error (expected (error $errno)))
  )

  ;;; Sets the current working directory
  (@interface func (export "chdir")
    ;;; Path to change the current working directory to
    (param $path string)
    (result $error (expected (error $errno)))
  )

  ;;; Registers a callback function for signals
  (@interface func (export "callback_signal")
    ;;; Exported function that will be called back when the signal triggers
    ;;; (must match the callback signature that takes the signal value)
    ;;; (if this is not specified the default will be "_signal")
    (param $callback string)
  )

  ;;; Creates a new thread by spawning that shares the same
  ;;; memory address space, file handles and main event loops.
  ;;; The web assembly process must export function named 'wasi_thread_start'
  (@interface func (export "thread_spawn_v2")
    ;;; Pointer to the structure the describes the thread
    ;;; that is being spawened
    (param $args (@witx pointer $thread_start))
    ;;; Returns the thread index of the newly created thread
    ;;; (indices always start from zero)
    (result $error (expected $tid (error $errno)))
  )

  ;;; Sends the current thread to sleep for a period of time
  (@interface func (export "thread_sleep")
    ;;; Amount of time that the thread should sleep
    (param $duration $timestamp)
    (result $error (expected (error $errno)))
  )

  ;;; Returns the index of the current thread
  ;;; (threads indices are sequential from zero while the
  ;;;  main thread ID equals the process ID)
  (@interface func (export "thread_id")
    (result $error (expected $tid (error $errno)))
  )

  ;;; Joins this thread with another thread, blocking this
  ;;; one until the other finishes
  (@interface func (export "thread_join")
    ;;; Handle of the thread to wait on
    (param $tid $tid)
    (result $error (expected (error $errno)))
  )

  ;;; Returns the available parallelism which is normally the
  ;;; number of available cores that can run concurrently
  (@interface func (export "thread_parallelism")
    (result $error (expected $size (error $errno)))
  )

  ;;; Sends a signal to a specific thread
  (@interface func (export "thread_signal")
    ;;; Handle of the thread to send a signal
    (param $tid $tid)
    ;;; Signal to send to the thread
    (param $signal $signal)
    (result $error (expected (error $errno)))
  )

  ;;; Wait for a futex_wake operation to wake us.
  ;;;
  ;;; Returns with EINVAL if the futex doesn't hold the expected value.
  ;;; Returns false on timeout, and true in all other cases.
  (@interface func (export "futex_wait")
    ;;; Memory location that holds the value that will be checked
    (param $futex (@witx pointer u32))
    ;;; Expected value that should be currently held at the memory location
    (param $expected u32)
    ;;; Timeout should the futex not be triggered in the allocated time
    (param $timeout (@witx const_pointer $option_timestamp))
    (result $error (expected $bool (error $errno)))
  )

  ;;; Wake up one thread that's blocked on futex_wait on this futex.
  ;;;
  ;;; Returns true if this actually woke up such a thread,
  ;;; or false if no thread was waiting on this futex.
  (@interface func (export "futex_wake")
    ;;; Memory location that holds a futex that others may be waiting on
    (param $futex (@witx pointer u32))
    (result $error (expected $bool (error $errno)))
  )

  ;;; Wake up all threads that are waiting on futex_wait on this futex.
  (@interface func (export "futex_wake_all")
    ;;; Memory location that holds a futex that others may be waiting on
    (param $futex (@witx pointer u32))
    (result $error (expected $bool (error $errno)))
  )

  ;;; Terminates the current running thread, if this is the last thread then
  ;;; the process will also exit with the specified exit code. An exit code
  ;;; of 0 indicates successful termination of the thread. The meanings of
  ;;; other values is dependent on the environment.
  (@interface func (export "thread_exit")
    ;;; The exit code returned by the process.
    (param $rval $exitcode)
    (@witx noreturn)
  )

  ;;; Creates a checkpoint of the current stack which allows it to be restored
  ;;; later using its stack hash. The value supplied will be returned upon
  ;;; restoration (and hence must be none zero) - zero will be returned when
  ;;; the stack is first recorded.
  ;;;
  ;;; This is used by `longjmp` and `setjmp`
  ;;;
  ;;; This function will read the __stack_pointer global
  (@interface func (export "stack_checkpoint")
    ;;; Reference to the stack snapshot that will be filled
    (param $snapshot (@witx pointer $stack_snapshot))
    ;;; Returns zero upon registration and the value when restored
    (result $error (expected $longsize (error $errno)))
  )

  ;;; Restores the current stack to a previous stack described by supplying
  ;;; stack snapshot.
  ;;;
  ;;; This function will manipulate the __stack_pointer global
  (@interface func (export "stack_restore")
    ;;; Reference to the stack snapshot that will be restored
    (param $snapshot (@witx const_pointer $stack_snapshot))
    ;;; Value to be returned when the stack is restored
    ;;; (if zero this will change to one)
    (param $val $longsize)
    ;;; This function never returns
    (@witx noreturn)
  )

  ;;; Send a signal to the process of the calling thread on a regular basis
  ;;; Note: This is similar to `setitimer` in POSIX.
  (@interface func (export "proc_raise_interval")
    ;;; The signal condition to trigger.
    (param $sig $signal)
    ;;; Time to wait before raising the signal
    ;;; (zero here indicates the signal interval is cancelled)
    (param $interval $timestamp)
    ;;; Flag that indicates if the signal will trigger indefinately
    (param $repeat $bool)
    (result $error (expected (error $errno)))
  )

  ;;; Forks the current process into a new subprocess. If the function
  ;;; returns a zero then its the new subprocess. If it returns a positive
  ;;; number then its the current process and the $pid represents the child.
  (@interface func (export "proc_fork")
    ;;; Indicates if the memory will be copied into the new process
    ;;; (if it is not copied this then becomes similar to `vfork` in
    ;;;  that the current process pauses until `proc_exec` is called)
    (param $copy_memory $bool)
    (result $error (expected $pid (error $errno)))
  )

  ;;; execv()  executes  the  program  referred to by pathname.  This causes the
  ;;; program that is currently being run by the calling process to  be  replaced
  ;;; with  a  new  program, with newly initialized stack, heap, and (initialized
  ;;; and uninitialized) data segments
  ;;;
  ;;; If the named process does not exist then the process will fail and terminate
  (@interface func (export "proc_exec")
    ;;; Name of the process to be spawned
    (param $name string)
    ;;; List of the arguments to pass the process
    ;;; (entries are separated by line feeds)
    (param $args string)
    ;;; This function never returns
    (@witx noreturn)
  )

  ;;; execve()  executes  the  program  referred to by pathname.  This causes the
  ;;; program that is currently being run by the calling process to  be  replaced
  ;;; with  a  new  program, with newly initialized stack, heap, and (initialized
  ;;; and uninitialized) data segments
  ;;;
  ;;; If the named process does not exist then the process will fail and terminate
  (@interface func (export "proc_exec2")
    ;;; Name of the process to be spawned
    (param $name string)
    ;;; List of the arguments to pass the process
    ;;; (entries are separated by line feeds)
    (param $args string)
    ;;; List of the env vars to pass the process
    ;;; (entries are separated by line feeds)
    (param $envs string)
    ;;; This function never returns
    (@witx noreturn)
  )

  ;;; Spawns a new process within the context of the parent process
  ;;; (i.e. this process). It inherits the filesystem and sandbox
  ;;; permissions but runs standalone.
  (@interface func (export "proc_spawn")
    ;;; Name of the process to be spawned
    (param $name string)
    ;;; Indicates if the process will chroot or not
    (param $chroot $bool)
    ;;; List of the arguments to pass the process
    ;;; (entries are separated by line feeds)
    (param $args string)
    ;;; List of the preopens for this process
    ;;; (entries are separated by line feeds)
    (param $preopen string)
    ;;; How will stdin be handled
    (param $stdin $stdio_mode)
    ;;; How will stdout be handled
    (param $stdout $stdio_mode)
    ;;; How will stderr be handled
    (param $stderr $stdio_mode)
    ;;; Working directory where this process should run
    ;;; (passing '.' will use the current directory)
    (param $working_dir string)
    ;;; Returns a bus process id that can be used to invoke calls
    (result $error (expected $process_handles (error $errno)))
  )

  ;;; Returns the handle of the current process
  (@interface func (export "proc_id")
    (result $error (expected $pid (error $errno)))
  )

  ;;; Returns the parent handle of a particular process
  (@interface func (export "proc_parent")
    ;;; Handle of the process to get the parent handle for
    (param $pid $pid)
    (result $error (expected $pid (error $errno)))
  )

  ;;; Wait for process to exit
  ;;;
  ;;; Passing none to PID will mean that the call will wait
  ;;; for any subprocess to exit. PID will be populated with
  ;;; the process that exited.
  (@interface func (export "proc_join")
    ;;; ID of the process to wait on
    (param $pid (@witx pointer $option_pid))
    ;;; Flags that determine how the join behaves
    (param $flags $join_flags)
    ;;; Returns the status of the process
    (result $error (expected $join_status (error $errno)))
  )

  ;;; Sends a signal to another process
  (@interface func (export "proc_signal")
    ;;; ID of the process to send a singal
    (param $pid $pid)
    ;;; Signal to send to the thread
    (param $signal $signal)
    (result $error (expected (error $errno)))
  )

  ;;; Explicitly requests for the runtime to create a
  ;;; snapshot of the guest module's state.
  (@interface func (export "proc_snapshot")
    (result $error (expected (error $errno)))
  )

  ;;; Securely connects to a particular remote network
  (@interface func (export "port_bridge")
    ;;; Fully qualified identifier for the network
    (param $network string)
    ;;; Access token used to authenticate with the network
    (param $token string)
    ;;; Level of encryption to encapsulate the network connection with
    (param $security $stream_security)
    (result $error (expected (error $errno)))
  )

  ;;; Disconnects from a remote network
  (@interface func (export "port_unbridge")
    (result $error (expected (error $errno)))
  )

  ;;; Acquires a set of addresses using DHCP
  (@interface func (export "port_dhcp_acquire")
    (result $error (expected (error $errno)))
  )

  ;;; Adds another static address to the local port
  (@interface func (export "port_addr_add")
    ;;; Address to be added
    (param $addr (@witx const_pointer $addr_cidr))
    (result $error (expected (error $errno)))
  )

  ;;; Removes an address from the local port
  (@interface func (export "port_addr_remove")
    ;;; Address to be removed
    (param $addr (@witx const_pointer $addr))
    (result $error (expected (error $errno)))
  )

  ;;; Clears all the addresses on the local port
  (@interface func (export "port_addr_clear")
    (result $error (expected (error $errno)))
  )

  ;;; Returns the MAC address of the local port
  (@interface func (export "port_mac")
    (result $error (expected $hardware_address (error $errno)))
  )

  ;;; Returns a list of all the addresses owned by the local port
  ;;;
  ;;; This function fills the output buffer as much as possible.
  ;;; If the buffer is not big enough then the naddrs address will be
  ;;; filled with the buffer size needed and the EOVERFLOW will be returned
  (@interface func (export "port_addr_list")
    ;;; The buffer where addresses will be stored
    (param $addrs (@witx pointer $addr_cidr))
    (param $naddrs (@witx pointer $size))
    ;;; The number of addresses returned.
    (result $error (expected (error $errno)))
  )

  ;;; Adds a default gateway to the local port
  (@interface func (export "port_gateway_set")
    ;;; Address of the default gateway
    (param $addr (@witx const_pointer $addr))
    (result $error (expected (error $errno)))
  )

  ;;; Adds a new route to the local port
  (@interface func (export "port_route_add")
    (param $cidr (@witx const_pointer $addr_cidr))
    (param $via_router (@witx const_pointer $addr))
    (param $preferred_until (@witx const_pointer $option_timestamp))
    (param $expires_at (@witx const_pointer $option_timestamp))
    (result $error (expected (error $errno)))
  )

  ;;; Removes an existing route from the local port
  (@interface func (export "port_route_remove")
    (param $cidr (@witx const_pointer $addr))
    (result $error (expected (error $errno)))
  )

  ;;; Clears all the routes in the local port
  (@interface func (export "port_route_clear")
    (result $error (expected (error $errno)))
  )

  ;;; Returns a list of all the routes owned by the local port
  ;;; This function fills the output buffer as much as possible.
  ;;; If the buffer is too small this will return EOVERFLOW and
  ;;; fill nroutes with the size of the buffer needed.
  (@interface func (export "port_route_list")
    ;;; The buffer where routes will be stored
    (param $routes (@witx pointer $route))
    (param $nroutes (@witx pointer $size))
    (result $error (expected (error $errno)))
  )

  ;;; Returns the current status of a socket
  (@interface func (export "sock_status")
    (param $fd $fd)
    (result $error (expected $sock_status (error $errno)))
  )

  ;;; Returns the local address to which the socket is bound.
  ;;;
  ;;; Note: This is similar to `getsockname` in POSIX
  ;;;
  ;;; When successful, the contents of the output buffer consist of an IP address,
  ;;; either IP4 or IP6.
  (@interface func (export "sock_addr_local")
    ;;; Socket that the address is bound to
    (param $fd $fd)
    (result $error (expected $addr_port (error $errno)))
  )

  ;;; Returns the remote address to which the socket is connected to.
  ;;;
  ;;; Note: This is similar to `getpeername` in POSIX
  ;;;
  ;;; When successful, the contents of the output buffer consist of an IP address,
  ;;; either IP4 or IP6.
  (@interface func (export "sock_addr_peer")
    ;;; Socket that the address is bound to
    (param $fd $fd)
    (result $error (expected $addr_port (error $errno)))
  )

  ;;; Create an endpoint for communication.
  ;;;
  ;;; creates an endpoint for communication and returns a file descriptor
  ;;; tor that refers to that endpoint. The file descriptor returned by a successful
  ;;; call will be the lowest-numbered file descriptor not currently open
  ;;; for the process.
  ;;;
  ;;; Note: This is similar to `socket` in POSIX using PF_INET
  (@interface func (export "sock_open")
    ;;; Address family
    (param $af $address_family)
    ;;; Socket type, either datagram or stream
    (param $socktype $sock_type)
    ;;; Socket protocol
    (param $sock_proto $sock_proto)
    ;;; The file descriptor of the socket that has been opened.
    (result $error (expected $fd (error $errno)))
  )

  ;;; Sets a particular socket setting
  ;;; Note: This is similar to `setsockopt` in POSIX for SO_REUSEADDR
  (@interface func (export "sock_set_opt_flag")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Socket option to be set
    (param $sockopt $sock_option)
    ;;; Value to set the option to
    (param $flag $bool)
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve status of particular socket seting
  ;;; Note: This is similar to `getsockopt` in POSIX for SO_REUSEADDR
  (@interface func (export "sock_get_opt_flag")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Socket option to be retrieved
    (param $sockopt $sock_option)
    (result $error (expected $bool (error $errno)))
  )

  ;;; Sets one of the times the socket
  (@interface func (export "sock_set_opt_time")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Socket option to be set
    (param $sockopt $sock_option)
    ;;; Value to set the time to
    (param $timeout (@witx const_pointer $option_timestamp))
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve one of the times on the socket
  (@interface func (export "sock_get_opt_time")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Socket option to be retrieved
    (param $sockopt $sock_option)
    (result $error (expected $option_timestamp (error $errno)))
  )

  ;;; Set size of particular option for this socket
  ;;; Note: This is similar to `setsockopt` in POSIX for SO_RCVBUF
  (@interface func (export "sock_set_opt_size")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Socket option to be set
    (param $sockopt $sock_option)
    ;;; Buffer size
    (param $size $filesize)
    (result $error (expected (error $errno)))
  )

  ;;; Retrieve the size of particular option for this socket
  ;;; Note: This is similar to `getsockopt` in POSIX for SO_RCVBUF
  (@interface func (export "sock_get_opt_size")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Socket option to be retrieved
    (param $sockopt $sock_option)
    (result $error (expected $filesize (error $errno)))
  )

  ;;; Joins a particular multicast IPv4 group
  (@interface func (export "sock_join_multicast_v4")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Multicast group to joined
    (param $multiaddr (@witx const_pointer $addr_ip4))
    ;;; Interface that will join
    (param $interface (@witx const_pointer $addr_ip4))
    (result $error (expected (error $errno)))
  )

  ;;; Leaves a particular multicast IPv4 group
  (@interface func (export "sock_leave_multicast_v4")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Multicast group to leave
    (param $multiaddr (@witx const_pointer $addr_ip4))
    ;;; Interface that will left
    (param $interface (@witx const_pointer $addr_ip4))
    (result $error (expected (error $errno)))
  )

  ;;; Joins a particular multicast IPv6 group
  (@interface func (export "sock_join_multicast_v6")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Multicast group to joined
    (param $multiaddr (@witx const_pointer $addr_ip6))
    ;;; Interface that will join
    (param $interface u32)
    (result $error (expected (error $errno)))
  )

  ;;; Leaves a particular multicast IPv6 group
  (@interface func (export "sock_leave_multicast_v6")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Multicast group to leave
    (param $multiaddr (@witx const_pointer $addr_ip6))
    ;;; Interface that will left
    (param $interface u32)
    (result $error (expected (error $errno)))
  )

  ;;; Bind a socket
  ;;; Note: This is similar to `bind` in POSIX using PF_INET
  (@interface func (export "sock_bind")
    ;;; File descriptor of the socket to be bind
    (param $fd $fd)
    ;;; Address to bind the socket to
    (param $addr (@witx const_pointer $addr_port))
    (result $error (expected (error $errno)))
  )

  ;;; Listen for connections on a socket
  ;;;
  ;;; Polling the socket handle will wait until a connection
  ;;; attempt is made
  ;;;
  ;;; Note: This is similar to `listen`
  (@interface func (export "sock_listen")
    ;;; File descriptor of the socket to be bind
    (param $fd $fd)
    ;;; Maximum size of the queue for pending connections
    (param $backlog $size)
    (result $error (expected (error $errno)))
  )

  ;;; Accept a new incoming connection.
  ;;; Note: This is similar to `accept` in POSIX.
  (@interface func (export "sock_accept_v2")
    ;;; The listening socket.
    (param $fd $fd)
    ;;; The desired values of the file descriptor flags.
    (param $flags $fdflags)
    ;;; New socket connection
    (result $error (expected (tuple $fd $addr_port) (error $errno)))
  )
  
  ;;; Initiate a connection on a socket to the specified address
  ;;; 
  ;;; Polling the socket handle will wait for data to arrive or for
  ;;; the socket status to change which can be queried via 'sock_status'
  ;;;
  ;;; Note: This is similar to `connect` in POSIX
  (@interface func (export "sock_connect")
    ;;; Socket descriptor
    (param $fd $fd)
    ;;; Address of the socket to connect to
    (param $addr (@witx const_pointer $addr_port))
    (result $error (expected (error $errno)))
  )

  ;;; Receive a message and its peer address from a socket.
  ;;; Note: This is similar to `recvfrom` in POSIX, though it also supports reading
  ;;; the data into multiple buffers in the manner of `readv`.
  (@interface func (export "sock_recv_from")
    (param $fd $fd)
    ;;; List of scatter/gather vectors to which to store data.
    (param $ri_data $iovec_array)
    ;;; Message flags.
    (param $ri_flags $riflags)
    ;;; Number of bytes stored in ri_data and message flags.
    (result $error (expected (tuple $size $roflags $addr_port) (error $errno)))
  )

  ;;; Send a message on a socket to a specific address.
  ;;; Note: This is similar to `sendto` in POSIX, though it also supports writing
  ;;; the data from multiple buffers in the manner of `writev`.
  (@interface func (export "sock_send_to")
    (param $fd $fd)
    ;;; List of scatter/gather vectors to which to retrieve data
    (param $si_data $ciovec_array)
    ;;; Message flags.
    (param $si_flags $siflags)
    ;;; Address of the socket to send message to
    (param $addr (@witx const_pointer $addr_port))
    ;;; Number of bytes transmitted.
    (result $error (expected $size (error $errno)))
  )

  ;;; Sends the entire contents of a file down a socket
  (@interface func (export "sock_send_file")
    (param $out_fd $fd)
    ;;; Open file that has the data to be transmitted
    (param $in_fd $fd)
    ;;; Offset into the file to start reading at
    (param $offset $filesize)
    ;;; Number of bytes to be sent
    (param $count $filesize)
    ;;; Number of bytes transmitted.
    (result $error (expected $filesize (error $errno)))
  )

  ;;; Resolves a hostname and a port to one or more IP addresses.
  ;;;
  ;;; Note: This is similar to `getaddrinfo` in POSIX
  ;;;
  ;;; When successful, the contents of the output buffer consist of a sequence of
  ;;; IPv4 and/or IPv6 addresses. Each address entry consists of a addr_t object.
  ;;
  ;;; This function fills the output buffer as much as possible.
  (@interface func (export "resolve")
    ;;; Host to resolve
    (param $host string)
    ;;; Port hint (zero if no hint is supplied)
    (param $port u16)
    ;;; The buffer where addresses will be stored
    (param $addrs (@witx pointer $addr_ip))
    (param $naddrs $size)
    ;;; The number of IP addresses returned during the DNS resolution.
    (result $error (expected $size (error $errno)))
  )

  ;;; Create an epoll interest list
  ;;;
  (@interface func (export "epoll_create")
    ;;; The file descriptor for this epoll interest list
    (result $error (expected $fd (error $errno)))
  )

  ;;; Modifies an epoll interest list
  ;;;
  (@interface func (export "epoll_ctl")
    ;;; File descriptor of the epoll interest list
    (param $epfd $fd)
    ;;; Operation to be made on the list
    (param $op $epoll_ctl)
    ;;; File descriptor to be added, deleted or modified
    (param $fd $fd)
    ;;; Reference to the event to be added, deleted or modified
    (param $event (@witx const_pointer $epoll_event))
    ;;; The number of bytes written.
    (result $error (expected (error $errno)))
  )

  ;;; wait for an I/O event on an epoll file descriptor
  ;;;
  (@interface func (export "epoll_wait")
    ;;; File descriptor of the epoll interest list
    (param $epfd $fd)
    ;;; Reference to the array of events
    (param $event (@witx pointer $epoll_event))
    ;;; Maximum number of events that will be returned in the array
    (param $maxevents $size)
    ;;; Timeout for the wait event
    (param $timeout $timestamp)
    ;;; The number of events returned.
    (result $error (expected $size (error $errno)))
  )

  ;;; Attempts to open a wasm library.
  (@interface func (export "dl_open")
    ;;; Path to the library
    (param $path string)
    ;;; A handle of the library or an error code
    (result $error (expected $dl_handle (error $errno)))
  )

  ;;; Load a symbol from a dynamically linked library
  (@interface func (export "dl_load_symbol")
    ;;; Name of the symbol to be loaded
    (param $symbol string)
    ;;; Handle to the library
    (param $handle $dl_handle)
    ;;; Returns the address of the symbol.
    ;;; In case of a function there is a index in the indirect function table at that address
    ;;; Not sure yet, whether this address should be relative to the module or absolute. Probably absolute.
    ;;; TODO: Figure out what exactly should be returned here.
    (result $error (expected $pointersize (error $errno)))
  )

  ;;; Close a dynamically linked library
  (@interface func (export "dl_close")
    ;;; Handle of the library to be closed
    (param $handle $dl_handle)
    (result $error (expected (error $errno)))
  )

  ;;; Get the most recent error from the dynamic linker as a human readable string
  (@interface func (export "dl_error")
    ;;; A buffer where the error message will be stored
    (param $message (@witx pointer u8))
    (param $message_len $size)
    ;;; The length of the error message.
    ;;; TODO: Figure out how to differentiate between no error and buffer to small.
    (result $error (expected $size (error $errno)))
  )

)
